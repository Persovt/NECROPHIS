#include "Main.h"
#include "../RL/ReflectiveLoader.h"



DWORD WINAPI CheatEntry(LPVOID lpThreadParameter)
{
	HMODULE hModule = (HMODULE)lpThreadParameter;

	if (Engine::Initialize() && Offset::Initialize() && Hook::Initialize() && g_NetVar.Init(Interfaces::Client()->GetAllClasses()))
		return 0;
	

	return 0;
}

BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved)
{
	if (fdwReason == DLL_PROCESS_ATTACH)
	{
    	DisableThreadLibraryCalls(hinstDLL);

		BaseDir = CSX::Utils::GetHackWorkingDirectory().c_str();

		if (BaseDir.size() < 1)
		{
			BaseDir = CSX::Utils::GetModuleBaseDir(hinstDLL);
		}

#if ENABLE_DEBUG_FILE == 1
		AllocConsole();
		AttachConsole(GetCurrentProcessId());
		freopen("CONIN$", "r", stdin);
		freopen("CONOUT$", "w", stdout);
		freopen("CONOUT$", "w", stderr);

		LogFile = BaseDir + "\\debug.log";
		DeleteFileA(LogFile.c_str());
		CSX::Log::LogFile = LogFile;
		printf("BaseDir = %s\nLogFile = %s\n", BaseDir.c_str(), LogFile.c_str());
		CSX::Log::Add("::Init::");

#endif

		CreateThread(0, 0, CheatEntry, hinstDLL, 0, 0);
		
	}
	else if (fdwReason == DLL_PROCESS_DETACH)
	{
		Engine::Shutdown();
	}

	return TRUE;
}



































































































































































































































































































































































